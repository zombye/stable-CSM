#include "/config.glsl"

uniform float far;

uniform vec3 cameraPosition;
uniform vec3 previousCameraPosition;

uniform mat4 gbufferProjectionInverse;
uniform mat4 gbufferModelViewInverse;

uniform mat4 shadowModelView;
uniform mat4 shadowProjection;

#include "/include/shadow_mapping/csm/storage_buffer.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
const ivec3 workGroups = ivec3(1, 1, 1);

void main() {
	// 1. Set last cascade radius.
	float last_cascade_radius = min(shadowDistance, far);

	// 2. Set cascade base.
	float cascade_base; {
		// Sets the preferred cascade base.
		// If possible, each cascade will be larger than the previous by this factor.
		const float preferred_cascade_base = 2.0;
		// Sets the largest radius permissible for the first cascade.
		// If this is smaller than what would be obtained from the preferred base, we calculate a new cascade base using this to ensure sufficient detail at short ranges.
		const float max_first_cascade_radius = 4.0;

		// Base that produces the preferred first cascade radius.
		cascade_base = pow(max_first_cascade_radius / last_cascade_radius, 1.0 / float(1 - CSM_CASCADES));

		// If the preferred base is larger, use it instead.
		cascade_base = max(cascade_base, preferred_cascade_base);
	}

	// Prepare some extra info before the loop
	// This is used in step 4.2.
	vec3 view_frustum_corner_unit_z[4] = vec3[4](
		vec3(-1.0,-1.0, 1.0),
		vec3( 1.0,-1.0, 1.0),
		vec3(-1.0, 1.0, 1.0),
		vec3( 1.0, 1.0, 1.0)
	);
	for (uint i = 0; i < 4; ++i) {
		vec4 tmp = gbufferProjectionInverse * vec4(view_frustum_corner_unit_z[i], 1.0);
		view_frustum_corner_unit_z[i] = tmp.xyz / tmp.w;
		view_frustum_corner_unit_z[i] /= abs(view_frustum_corner_unit_z[i].z);
		view_frustum_corner_unit_z[i] = mat3(gbufferModelViewInverse) * view_frustum_corner_unit_z[i];
		view_frustum_corner_unit_z[i] = mat3(shadowModelView) * view_frustum_corner_unit_z[i];
	}
	vec2 view_frustum_plane_aabb_min_dz = min(min(view_frustum_corner_unit_z[0].xy, view_frustum_corner_unit_z[1].xy), min(view_frustum_corner_unit_z[2].xy, view_frustum_corner_unit_z[3].xy));
	vec2 view_frustum_plane_aabb_max_dz = max(max(view_frustum_corner_unit_z[0].xy, view_frustum_corner_unit_z[1].xy), max(view_frustum_corner_unit_z[2].xy, view_frustum_corner_unit_z[3].xy));
	vec2 view_frustum_plane_aabb_radii_dz = 0.5 * (view_frustum_plane_aabb_max_dz - view_frustum_plane_aabb_min_dz);
	// This is used in step 4.8.
	// This is only needed because the shadow view matrix isn't centered on the player camera.
	vec3 view_origin = mat3(shadowModelView) * gbufferModelViewInverse[3].xyz + shadowModelView[3].xyz;

	// 3. Set the near plane of the first cascade's frustum slice.
	// First cascade's frustum slice uses the actual view frustum near plane as its near plane.
	// Later cascades frustum slices will use the far plane of the previous slice as its near plane.
	float next_slice_near_plane = 0.05; // TODO: need to verify this...
	for (int cascade_index = 0; cascade_index < CSM_CASCADES; ++cascade_index) {
		// 4.1. Set this cascade's radius
		float cascade_radius = last_cascade_radius * pow(cascade_base, float(cascade_index + 1)) / pow(cascade_base, float(CSM_CASCADES));

		// 4.2. Set the far plane of this cascade's frustum slice
		float slice_near_plane = next_slice_near_plane;
		vec2 slice_near_plane_aabb_size = slice_near_plane * (view_frustum_plane_aabb_max_dz - view_frustum_plane_aabb_min_dz);
		vec2 candidate_far_planes = (2.0 * cascade_radius - slice_near_plane_aabb_size) / (max(view_frustum_plane_aabb_max_dz, 0.0) - min(view_frustum_plane_aabb_min_dz, 0.0)) + slice_near_plane;
		float slice_far_plane = min(candidate_far_planes.x, candidate_far_planes.y);
		next_slice_near_plane = slice_far_plane;

		// 4.3. Based on the center of the slice AABB, as well as the viewing direction for the smaller axis of the AABB, set the cascade center.
		vec2 view_frustum_slice_aabb_min = min(slice_near_plane * view_frustum_plane_aabb_min_dz, slice_far_plane * view_frustum_plane_aabb_min_dz);
		vec2 view_frustum_slice_aabb_max = max(slice_near_plane * view_frustum_plane_aabb_max_dz, slice_far_plane * view_frustum_plane_aabb_max_dz);
		vec2 view_frustum_slice_aabb_center = 0.5 * (view_frustum_slice_aabb_min + view_frustum_slice_aabb_max);

		vec2 cascade_center = view_frustum_slice_aabb_center;
		if (candidate_far_planes.x < candidate_far_planes.y) {
			cascade_center.y += (cascade_radius - 0.5 * (view_frustum_slice_aabb_max.y - view_frustum_slice_aabb_min.y)) * (mat3(shadowModelView) * mat3(gbufferModelViewInverse) * vec3(0,0,-1.0)).y;
		} else {
			cascade_center.x += (cascade_radius - 0.5 * (view_frustum_slice_aabb_max.x - view_frustum_slice_aabb_min.x)) * (mat3(shadowModelView) * mat3(gbufferModelViewInverse) * vec3(0,0,-1.0)).x;
		}

		// 4.4. Expand this cascade's radius by a specific distance in blocks.
		float cascade_radius_cull = cascade_radius; // radius used for culling to help speed up rendering slightly
		cascade_radius      += CSM_CASCADE_MARGIN_BLOCKS;
		cascade_radius_cull -= CSM_CASCADE_MARGIN_BLOCKS;

		// 4.5. Expand this cascade's radius by a specific distance in pixels.
		const int cascade_resolution = shadowMapResolution / 2;
		float cascade_pixel_size = cascade_radius / (0.5 * cascade_resolution - CSM_CASCADE_MARGIN_PIXELS);
		cascade_radius      += CSM_CASCADE_MARGIN_PIXELS * cascade_pixel_size;
		cascade_radius_cull -= CSM_CASCADE_MARGIN_PIXELS * cascade_pixel_size;

		// 4.6. Update this cascade's tracked pixel grid offset.
		vec2 align_offset = (mat3(shadowModelView) * (previousCameraPosition - cameraPosition)).xy;
		csm.cascade_pixel_offset[cascade_index] = fract(align_offset / cascade_pixel_size + csm.cascade_pixel_offset[cascade_index]);

		// 4.7. Round this cascade's center to the tracked pixel grid offset.
		// I'm only 90% sure this rounding is correct.
		// Shouldn't be off by more than a pixel at worst, though, so it's not a big deal.
		cascade_center = (round(cascade_center / cascade_pixel_size - csm.cascade_pixel_offset[cascade_index]) + csm.cascade_pixel_offset[cascade_index]) * cascade_pixel_size;

		// 4.8. Construct this cascade's final projection parameters based on its radius & center.
		csm.cascade_projection_scale[cascade_index] = vec3(vec2(1.0 / cascade_radius), -1.0 / last_cascade_radius);
		csm.cascade_projection_offset[cascade_index] = (vec3(-cascade_center, 0.0) - view_origin) * csm.cascade_projection_scale[cascade_index];

		csm.cascade_projection_scale_nomargin[cascade_index]  = vec3(vec2(1.0 / cascade_radius_cull), -1.0 / last_cascade_radius);
		csm.cascade_projection_offset_nomargin[cascade_index] = (vec3(-cascade_center, 0.0) - view_origin) * csm.cascade_projection_scale_nomargin[cascade_index];
	}
}
